in_code: |-
  _start:
    lit 0   ; адрес первого числа
    lit 990 ; начальное число для итерации первого числа
    !
    lit 1   ; адрес второго числа
    lit 913 ; начальное число для итераций второго числа
    !
    lit 2   ; адрес для палиндрома
    lit 0   ; первоначальное значение
    !
    lit 4   ; переменная для индекса массива цифр числа
    lit 6   ; начальный индекс - 6
    !
    lit 5   ; дополнительная переменная для индекса массива цифр числа
    lit 6   ; начальный индекс - 6
    !
  while:
      lit 0 @
      lit 1 @ ; загрузим оба числа для умножения
      *
      lit 3   ; адрес буфера для сохранения слова
      swap
      !       ; сохранение в буфер
      jump palindrome_save ; проверим, является ли число палиндромом
  palindrome_save:
      lit 3 @ ; берем число, которое будем проверять
      dup
      lit 10
      swap
      mod
      lit 4 @ ; берем индекс
      swap
      !       ; сохраняем
      lit 10  ; загружаем 10 для целочисленного деления
      swap
      /
      dup
      if palindrome_check
      lit 3
      swap
      !       ; сохраняем результат без последней цифры
      lit 4
      dup
      @
      lit 1
      +
      !       ; сохраняем переменную для индекса, увеличенную на 1
      jump palindrome_save
  palindrome_check:
      lit 4 @ @   ; возьмем крайнее левое число массива
      lit 5 @ @   ; возьмем крайнее правое число массива
      =
      if prep_while   ; увеличим числа, которые будем перемножать
      lit 1   ; уменьшим счетчик крайнего правого числа массива
      lit 4 @
      -
      lit 4
      swap
      !       ; сохраним новое значение
      lit 1   ; увеличим счетчик крайнего левого числа массива
      lit 5 @
      +
      lit 5
      swap
      !       ; сохраним новое значение
      lit 1
      lit 4 @
      lit 5 @
      =       ; если индексы совпали, то число - палиндром
      -
      if save1
      lit 4 @
      lit 5 @
      <       ; если индексы поменялись по величине друг с другом, то число - палиндром
      if save1
      jump palindrome_check
  save1:
      lit 0 @
      lit 1 @
      *       ; легче посчитать заново, чес сохранять в памяти числа...
      dup
      lit 2 @
      swap
      <       ; если найденный палиндром меньше прошлого, то отбрасываем его
      if save
      jump prep_while
  save:
      lit 2
      swap
      !       ; сохраним полином
      lit 12
      lit 0 @
      !
      lit 13
      lit 1 @
      !       ; сохраним его множители в память
  prep_while:
      lit 4   ; переменная для индекса массива цифр числа
      lit 6   ; начальный индекс - 6
      !
      lit 5   ; дополнительная переменная для индекса массива цифр числа
      lit 6   ; начальный индекс - 6
      !
      lit 999 ; если первый множитель ушел за 999, заканчиваем
      lit 0 @
      <
      if end
      lit 1
      lit 990 ; если второй множитель ушел за 990, прибавляем к первой единицу
      lit 1 @
      =
      -
      if plus_x
      lit 1   ; увеличим второй множитель на 11
      dup @
      lit 11
      +
      !
      jump while  ; возврат в первоначальный цикл
  plus_x:
      lit 0   ; увеличиваем первое слагаемое и сбрасываем до 110 второе
      dup @
      lit 1 +
      !
      lit 1
      lit 110
      !
      jump while
  end:
      lit 14 ; загрузим в память получившийся палиндром
      lit 2 @
      !
      halt
in_stdin: |-
  5Artem
out_code_hex: |-
  0 - 157FFFFFFF - lit 2147483647
  1 - 1501 - lit 1
  2 - 03 - +
  3 - 20 - c
  4 - 01 - dup
  5 - 1530 - lit 48
  6 - 03 - +
  7 - 1602 - out 2
  8 - 02 - swap
  9 - 1500 - lit 0
  10 - 02 - swap
  11 - 11 - !
  12 - 1501 - lit 1
  13 - 02 - swap
  14 - 11 - !
  15 - 14 - halt

out_stdout: |2

  Машинный код
  0 - 157FFFFFFF - lit 2147483647
  1 - 1501 - lit 1
  2 - 03 - +
  3 - 20 - c
  4 - 01 - dup
  5 - 1530 - lit 48
  6 - 03 - +
  7 - 1602 - out 2
  8 - 02 - swap
  9 - 1500 - lit 0
  10 - 02 - swap
  11 - 11 - !
  12 - 1501 - lit 1
  13 - 02 - swap
  14 - 11 - !
  15 - 14 - halt

  source LoC: 18 code instr: 16
  ============================================================
  [tick 0] LIT - подготовка
  [tick 1] LIT - загрузка значения 2147483647
  [tick 1] TOS -> STACK
  [tick 2] LIT - подготовка
  [tick 3] LIT - загрузка значения 1
  [tick 3] TOS -> STACK
  [tick 4] ADD
  [tick 4] FIRST_STACK -> TOS
  [tick 5] TOS -> FIRST_STACK
  [tick 6] CARRY
  [tick 7] DUP
  [tick 8] TOS -> FIRST_STACK
  [tick 9] A -> TOS
  [tick 10] TOS -> FIRST_STACK
  [tick 11] LIT - подготовка
  [tick 12] LIT - загрузка значения 48
  [tick 12] TOS -> STACK
  [tick 13] ADD
  [tick 13] FIRST_STACK -> TOS
  [tick 14] TOS -> FIRST_STACK
  [tick 15] EMIT
  Output char '1'
  [tick 16] SWAP
  [tick 16] FIRST_STACK -> TOS
  [tick 18] FIRST_STACK -> A
  [tick 19] TOS -> FIRST_STACK
  [tick 20] A -> TOS
  [tick 21] TOS -> FIRST_STACK
  [tick 22] LIT - подготовка
  [tick 23] LIT - загрузка значения 0
  [tick 23] TOS -> STACK
  [tick 24] SWAP
  [tick 24] FIRST_STACK -> TOS
  [tick 26] FIRST_STACK -> A
  [tick 27] TOS -> FIRST_STACK
  [tick 28] A -> TOS
  [tick 29] TOS -> FIRST_STACK
  [tick 30] STORE
  [tick 31] LIT - подготовка
  [tick 32] LIT - загрузка значения 1
  [tick 32] TOS -> STACK
  [tick 33] SWAP
  [tick 33] FIRST_STACK -> TOS
  [tick 35] FIRST_STACK -> A
  [tick 36] TOS -> FIRST_STACK
  [tick 37] A -> TOS
  [tick 38] TOS -> FIRST_STACK
  [tick 39] STORE
  [tick 40] HALT


out_log: |-
  DEBUG    root:machine.py:500 Tick: 0, PC: 0, Stack: [0, 0], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: [], tos: 0, a: 0, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 2, PC: 1, Stack: [2147483647, 0], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: [], tos: 0, a: 0, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 4, PC: 2, Stack: [1, 2147483647], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: [], tos: 0, a: 0, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 6, PC: 3, Stack: [0, 0], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: [], tos: 0, a: 0, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 7, PC: 4, Stack: [1, 0], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: [], tos: 0, a: 0, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 11, PC: 5, Stack: [1, 1], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: [], tos: 1, a: 1, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 13, PC: 6, Stack: [48, 1], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: [], tos: 1, a: 1, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 15, PC: 7, Stack: [49, 1], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: [], tos: 49, a: 1, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 16, PC: 8, Stack: [1, 0], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: ['1'], tos: 49, a: 1, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 22, PC: 9, Stack: [0, 1], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: ['1'], tos: 0, a: 0, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 24, PC: 10, Stack: [0, 0], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: ['1'], tos: 0, a: 0, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 30, PC: 11, Stack: [0, 0], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: ['1'], tos: 0, a: 0, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 31, PC: 12, Stack: [1, 0], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: ['1'], tos: 0, a: 0, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 33, PC: 13, Stack: [1, 1], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: ['1'], tos: 0, a: 0, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 39, PC: 14, Stack: [1, 1], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: ['1'], tos: 1, a: 1, b: [], dump: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 40, PC: 15, Stack: [0, 0], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: ['1'], tos: 1, a: 1, b: [], dump: [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  DEBUG    root:machine.py:504 Tick: 41, PC: 15, Stack: [0, 0], Input: ['5', 'A', 'r', 't', 'e', 'm'], Output: ['1'], tos: 1, a: 1, b: [], dump: [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
  EOF
