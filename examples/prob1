0x0 VARIABLE first_num
0x0 VARIABLE second_num
0x0 VARIABLE palindrome
0x0 VARIABLE mulNum
0x0 VARIABLE indexF
0x0 VARIABLE indexS
0x0 VARIABLE massive
0x0 VARIABLE dopNum1
0x0 VARIABLE dopNum2
0x0 VARIABLE dopPalindrome
_start:
    lit first_num   ; адрес первого числа
    lit 990 ; начальное число для итерации первого числа
    !
    lit second_num   ; адрес второго числа
    lit 913 ; начальное число для итераций второго числа
    !
    lit palindrome   ; адрес для палиндрома
    lit 0   ; первоначальное значение
    !
    lit indexF   ; переменная для индекса массива цифр числа
    lit massive   ; начальный индекс - 6
    !
    lit indexS   ; дополнительная переменная для индекса массива цифр числа
    lit massive   ; начальный индекс - 6
    !
while:
    lit first_num @
    lit second_num @ ; загрузим оба числа для умножения
    *
    lit mulNum   ; адрес буфера для сохранения слова
    swap
    !       ; сохранение в буфер
    jump palindrome_save ; проверим, является ли число палиндромом
palindrome_save:
    lit mulNum @ ; берем число, которое будем проверять
    dup
    lit 10
    swap
    %
    lit indexF @ ; берем индекс
    swap
    !       ; сохраняем
    lit 10  ; загружаем 10 для целочисленного деления
    swap
    /
    dup
    if palindrome_check
    lit mulNum
    swap
    !       ; сохраняем результат без последней цифры
    lit indexF
    dup
    @
    lit 1
    +
    !       ; сохраняем переменную для индекса, увеличенную на 1
    jump palindrome_save
palindrome_check:
    lit indexF @ @   ; возьмем крайнее левое число массива
    lit indexS @ @   ; возьмем крайнее правое число массива
    =
    if prep_while   ; увеличим числа, которые будем перемножать
    lit 1   ; уменьшим счетчик крайнего правого числа массива
    lit indexF @
    -
    lit indexF
    swap
    !       ; сохраним новое значение
    lit 1   ; увеличим счетчик крайнего левого числа массива
    lit indexS @
    +
    lit indexS
    swap
    !       ; сохраним новое значение
    lit 1
    lit indexF @
    lit indexS @
    =       ; если индексы совпали, то число - палиндром
    -
    if save1
    lit indexF @
    lit indexS @
    <       ; если индексы поменялись по величине друг с другом, то число - палиндром
    if save1
    jump palindrome_check
save1:
    lit first_num @
    lit second_num @
    *       ; легче посчитать заново, чес сохранять в памяти числа...
    dup
    lit palindrome @
    swap
    <       ; если найденный палиндром меньше прошлого, то отбрасываем его
    if save
    jump prep_while
save:
    lit palindrome
    swap
    !       ; сохраним полином
    lit dopNum1
    lit first_num @
    !
    lit dopNum2
    lit second_num @
    !       ; сохраним его множители в память
prep_while:
    lit indexF   ; переменная для индекса массива цифр числа
    lit massive   ; начальный индекс - 6
    !
    lit indexS   ; дополнительная переменная для индекса массива цифр числа
    lit massive   ; начальный индекс - 6
    !
    lit 999 ; если первый множитель ушел за 999, заканчиваем
    lit first_num @
    <
    if end
    lit 1
    lit 990 ; если второй множитель ушел за 990, прибавляем к первой единицу
    lit second_num @
    =
    -
    if plus_x
    lit second_num   ; увеличим второй множитель на 11
    dup @
    lit 11
    +
    !
    jump while  ; возврат в первоначальный цикл
plus_x:
    lit first_num   ; увеличиваем первое слагаемое и сбрасываем до 110 второе
    dup @
    lit 1 +
    !
    lit second_num
    lit 110
    !
    jump while
end:
    lit dopPalindrome ; загрузим в память получившийся палиндром
    lit palindrome @
    !
    lit palindrome @
    out 2
    halt